'''Screen Schedule
'''

from kivy.app import App
from kivy.uix.screenmanager import Screen
from kivy.uix.gridlayout import GridLayout
from kivy.uix.scrollview import ScrollView
from kivy.uix.label import Label
from kivy.lang import Builder
from kivy.core.window import Window
from kivy.factory import Factory
import datetime, pprint
app = App.get_running_app()


class ScreenSchedule(Screen):
    '''
    Screen to display the schedule as per schedule.json generated by
    pydelhiconf.network every time the app is started. A default
    schedule is provided.

    Screen looks like:

    -----------------------------------------
    | YYYY-MM-DD                            | <- Date of event
    |                                       |
    |           HH:MM-HH:MM                 | <- Start time - End time
    |                                       |
    |           Title                       | <- Title of talk/workshop
    |           Type                        | <- Type: Talk/Workshop
    |           Speaker                     | <- Name of speaker
    |           .                           |
    |           .                           |
    -----------------------------------------

    '''

    Builder.load_string('''
<Topic@Label>
    canvas.before:
        Color
            rgba: app.base_inactive_light
        Rectangle
            size: self.width, self.height
            pos: self.right - self.width  , self.y
        Color
            rgba: app.base_inactive_light[:3]+[.5]
        Rectangle
            size: self.width, self.height
            pos: self.right - self.width -10, self.y - dp(10)
    font_size: dp(27)
    text_size: self.width - dp(10), None
    size_hint: None, None
    height: self.texture_size[1]
    width: dp(300)
    halign: 'right'
    valign: 'middle'
    pos_hint: {'right': 1}

<AccordionItemTitle>
    text_size: self.width - dp(10), self.height
    halign: 'left'
    valign: 'middle'

<AccordionItem>
    back_color: app.base_active_color
    canvas.before:
        Color
            rgba: root.back_color or (1, 1, 1, 1)
        Rectangle
            size: dp(270), dp(36)
            pos: self.x, self.top - dp(36)
        Color
            rgba: (list(root.back_color[:3])+[.3]) if root.back_color else (1, 1, 1, 1)
        Rectangle
            size: dp(270), dp(36)
            pos: self.x + dp(7), self.top - (dp(36) + dp(7)) 

<TimeSlice@Label>
    size_hint_y: None
    height: dp(27)
    width: dp(40)
    size_hint: None, 1
    background_color: app.base_active_color[:3] + [.3]
    canvas.before:
        Color
            rgba: root.background_color if root.background_color else (1, 1, 1, 1)
        Rectangle
            size: self.size
            pos: self.pos
<GridLabel@Label>
    height: dp(27)
    size_hint: None, None
    halign: 'left'
    width: dp(100)
    text_size:self.width, self.height
    xx : True
    canvas.before:
        Color
            rgba: app.base_inactive_light[:3]+[.3] if self.xx else (1,1,1,0)
        Rectangle
            size: self.size
            pos: self.pos

<GridLabel1@GridLabel>
    size_hint: 1, None
    text_size:self.width, None
    height: self.texture_size[1]
    
   
<ScreenSchedule>
    name: 'ScreenSchedule'
    BoxLayout
        spacing: dp(20)
        orientation: 'vertical'
        padding: dp(4)
        Topic
            text: app.event_name
        Accordion
            id: accordian_days
            orientation: 'vertical'
 ''')


    def on_enter(self, onsuccess=False):
        '''Series of actions to be performed when Schedule screen is entered
        '''
        
        self.ids.accordian_days.clear_widgets()
        from network import get_data

        # this should update the file on disk
        print onsuccess
        event = get_data('event', onsuccess=onsuccess).get('0.0.1')[0]
        schedule = get_data('schedule', onsuccess=onsuccess)

        # read the file from disk
        # pprint.pprint(event)
        app.event_name = event['name']
        app.venue_name = event['venue']
        start_date = event['start_date']
        end_date = event['end_date']
        
        dates = schedule['results'][0].keys()     
        dates = sorted(dates, key=lambda x: datetime.datetime.strptime(x, '%Y-%m-%d'))
        for date in dates:
            cday = Factory.AccordionItem(title=date)
            self.ids.accordian_days.add_widget(cday)
            sched = schedule['results'][0][date] 

            items = len(sched)
            sv = ScrollView()
            gl = GridLayout(cols=2,
                            row_default_height="27dp",
                            size_hint_y=None,
                            padding='2dp')
            gl.bind(minimum_height=gl.setter('height'))
            # for x in ['Time','Title']:
            #     ts = Factory.TimeSlice(text=x)
            #     gl.add_widget(ts)
            i = 0
            for i in xrange(0, items):
                start_time = sched[i]['start_time']
                end_time = sched[i]['end_time']
                l = Factory.GridLabel(text = "%s - %s"%(start_time,end_time),xx=i%2==0)
                gl.add_widget(l)
                # bg = 
                gl.add_widget(Factory.GridLabel1(text=sched[i]['title'],xx=i%2==0))
                gl.add_widget(Factory.GridLabel(text=sched[i]['type'],xx=i%2==0))
                gl.add_widget(Factory.GridLabel1(text=sched[i]['speaker_name'],xx=i%2==0))
                
                i+=1
            sv.add_widget(gl)
            cday.add_widget(sv)
            

            # TODO: Dates are not sorted
