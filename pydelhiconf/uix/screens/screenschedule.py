'''Screen Schedule
'''

from kivy.app import App
from kivy.uix.screenmanager import Screen
from kivy.uix.gridlayout import GridLayout
from kivy.uix.scrollview import ScrollView
from kivy.uix.label import Label
from kivy.lang import Builder
from kivy.core.window import Window
from kivy.factory import Factory
import datetime, pprint
from kivy.properties import ObjectProperty
from uix.tabbedcarousel import TabbedCarousel
import datetime
app = App.get_running_app()

class TalkInfo(Factory.ButtonBehavior, Factory.BoxLayout):
    '''
    '''

    talk = ObjectProperty(None)

    Builder.load_string('''
<TalkInfo>
    size_hint_y: None
    height: dp(45)
    spacing: dp(9)
    LeftAlignedLabel:
        size_hint_x: None
        text: "{}-{}".format(root.talk['start_time'], root.talk['end_time'])
    LeftAlignedLabel:
        text: root.talk['title']
''')




class ScreenSchedule(Screen):
    '''
    Screen to display the schedule as per schedule.json generated by
    pydelhiconf.network every time the app is started. A default
    schedule is provided.

    Screen looks like:

    -----------------------------------------
    | YYYY-MM-DD                            | <- Date of event
    |                                       |
    |           HH:MM-HH:MM                 | <- Start time - End time
    |                                       |
    |           Title                       | <- Title of talk/workshop
    |           Type                        | <- Type: Talk/Workshop
    |           Speaker                     | <- Name of speaker
    |           .                           |
    |           .                           |
    -----------------------------------------

    '''

    Builder.load_string('''
<Topic@Label>
    canvas.before:
        Color
            rgba: app.base_inactive_light
        Rectangle
            size: self.width, self.height
            pos: self.right - self.width  , self.y
        Color
            rgba: app.base_inactive_light[:3]+[.5]
        Rectangle
            size: self.width, self.height
            pos: self.right - self.width -10, self.y - dp(10)
    font_size: dp(27)
    text_size: self.width - dp(10), None
    size_hint: None, None
    height: self.texture_size[1]
    width: dp(300)
    halign: 'right'
    valign: 'middle'
    pos_hint: {'right': 1}

<AccordionItemTitle>
    text_size: self.width - dp(10), self.height
    halign: 'left'
    valign: 'middle'

<AccordionItem>
    back_color: app.base_active_color
    canvas.before:
        Color
            rgba: root.back_color or (1, 1, 1, 1)
        Rectangle
            size: dp(270), dp(36)
            pos: self.x, self.top - dp(36)
        Color
            rgba: (list(root.back_color[:3])+[.3]) if root.back_color else (1, 1, 1, 1)
        Rectangle
            size: dp(270), dp(36)
            pos: self.x + dp(7), self.top - (dp(36) + dp(7)) 

<Header@LeftAlignedLabel>
    size_hint_y: None
    height: dp(27)
    width: dp(40)
    size_hint: None, 1
    background_color: app.base_active_color[:3] + [.3]
    canvas.before:
        Color
            rgba: root.background_color if root.background_color else (1, 1, 1, 1)
        Rectangle
            size: self.size
            pos: self.pos
    
   
<ScreenSchedule>
    name: 'ScreenSchedule'
    BoxLayout
        # spacing: dp(20)
        orientation: 'vertical'
        padding: dp(4)
        Topic
            text: app.event_name
        Accordion
            id: accordian_days
            orientation: 'vertical'

<TalkTitle@BoxLayout>
    spacing: dp(9)   
    height: dp(30)
    size_hint_y: None
    Header
        size_hint: None,None
        text: 'Time'
    Header
        text: 'Ttile'

<Track@Screen>
    ScrollView
        GridLayout
            id: container
            cols: 1
            size_hint_y: None
            padding: '15dp'
            spacing: '2dp'
            height: self.minimum_height
 ''')

    def on_enter(self, onsuccess=False):
        '''Series of actions to be performed when Schedule screen is entered
        '''
        self.ids.accordian_days.clear_widgets()
        from network import get_data

        # this should update the file on disk
        events = get_data('event', onsuccess=onsuccess).get('0.0.1')
        schedule = get_data('schedule', onsuccess=onsuccess).get('0.0.1')[0]

        # take first event as the one to display schedule for.
        event = events[0]
        app.event_name = event['name']
        app.venue_name = event['venue']
        start_date = event['start_date']
        end_date = event['end_date']
        
        dates = schedule.keys()[1:]
        # each day could have multiple tracks
        tracks = schedule['tracks']
        dates = sorted(
            dates,
            key=lambda x: datetime.datetime.strptime(x, '%Y-%m-%d'))

        # perf optims, minimize dot lookups
        acordion_add = self.ids.accordian_days.add_widget
        AccordionItem = Factory.AccordionItem
        Track = Factory.Track

        for date in dates:
            # add current day as accordion widget
            cday = AccordionItem(title=date)
            acordion_add(cday)
            sched = schedule[date]
            # create a carousel for each track
            tcarousel = TabbedCarousel()
            
            # this carousel would show each track as new tab
            trackscreens = []
            for track in tracks:
                trk = Track(name=track)
                trackscreens.append(trk)
                # add track to carousel
                tcarousel.add_widget(trk)
            
            items = len(sched)
            for i in xrange(items):
                talk = sched[i]
                tid = talk['track']
                print tid
                if tid.lower() == 'all':
                    for tlk in trackscreens:
                        ti = TalkInfo(talk=talk)
                        tlk.ids.container.add_widget(ti)
                    continue
                ti = TalkInfo(talk=talk)
                trackscreens[int(tid)-1].ids.container.add_widget(ti)

            cday.add_widget(tcarousel)


    def load_screentalk(self, instance):
        ldscr = app.load_screen('ScreenTalks', manager=app.navigation_manager)
        ldscr.talkid = self.talkid